{"ast":null,"code":"// User management\nexport const registerUser = (name, email, password) => {\n  const users = JSON.parse(localStorage.getItem('users')) || [];\n\n  // Check if user already exists\n  if (users.find(user => user.email === email)) {\n    throw new Error('User with this email already exists');\n  }\n  const newUser = {\n    id: Date.now().toString(),\n    name,\n    email,\n    password,\n    // Note: In real app, hash the password!\n    createdAt: new Date().toISOString()\n  };\n  users.push(newUser);\n  localStorage.setItem('users', JSON.stringify(users));\n  localStorage.setItem('currentUser', JSON.stringify(newUser));\n  return newUser;\n};\nexport const loginUser = (email, password) => {\n  const users = JSON.parse(localStorage.getItem('users')) || [];\n  const user = users.find(u => u.email === email && u.password === password);\n  if (!user) {\n    throw new Error('Invalid email or password');\n  }\n  localStorage.setItem('currentUser', JSON.stringify(user));\n  return user;\n};\nexport const logoutUser = () => {\n  localStorage.removeItem('currentUser');\n};\nexport const getCurrentUser = () => {\n  const user = localStorage.getItem('currentUser');\n  return user ? JSON.parse(user) : null;\n};\n\n// Task management\nexport const getTasks = userId => {\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n  return tasks.filter(task => task.userId === userId);\n};\nexport const createTask = (taskData, userId) => {\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n  const newTask = {\n    id: Date.now().toString(),\n    userId,\n    ...taskData,\n    completed: false,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  tasks.push(newTask);\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n  return newTask;\n};\nexport const updateTask = (taskId, updates) => {\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\n  if (taskIndex === -1) {\n    throw new Error('Task not found');\n  }\n  tasks[taskIndex] = {\n    ...tasks[taskIndex],\n    ...updates,\n    updatedAt: new Date().toISOString()\n  };\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n  return tasks[taskIndex];\n};\nexport const deleteTask = taskId => {\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\n  const filteredTasks = tasks.filter(task => task.id !== taskId);\n  localStorage.setItem('tasks', JSON.stringify(filteredTasks));\n};\nexport const toggleTaskCompletion = (taskId, currentStatus) => {\n  return updateTask(taskId, {\n    completed: !currentStatus\n  });\n};\n\n// Statistics\nexport const getTaskStatistics = userId => {\n  const tasks = getTasks(userId);\n  const total = tasks.length;\n  const completed = tasks.filter(task => task.completed).length;\n  const pending = total - completed;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const dueToday = tasks.filter(task => {\n    if (!task.dueDate || task.completed) return false;\n    const dueDate = new Date(task.dueDate);\n    dueDate.setHours(0, 0, 0, 0);\n    return dueDate.getTime() === today.getTime();\n  }).length;\n  const overdue = tasks.filter(task => {\n    if (!task.dueDate || task.completed) return false;\n    const dueDate = new Date(task.dueDate);\n    return dueDate < today;\n  }).length;\n  return {\n    total,\n    completed,\n    pending,\n    dueToday,\n    overdue\n  };\n};","map":{"version":3,"names":["registerUser","name","email","password","users","JSON","parse","localStorage","getItem","find","user","Error","newUser","id","Date","now","toString","createdAt","toISOString","push","setItem","stringify","loginUser","u","logoutUser","removeItem","getCurrentUser","getTasks","userId","tasks","filter","task","createTask","taskData","newTask","completed","updatedAt","updateTask","taskId","updates","taskIndex","findIndex","deleteTask","filteredTasks","toggleTaskCompletion","currentStatus","getTaskStatistics","total","length","pending","today","setHours","dueToday","dueDate","getTime","overdue"],"sources":["C:/Person S/web/Task/src/services/localStorage.js"],"sourcesContent":["// User management\r\nexport const registerUser = (name, email, password) => {\r\n  const users = JSON.parse(localStorage.getItem('users')) || [];\r\n  \r\n  // Check if user already exists\r\n  if (users.find(user => user.email === email)) {\r\n    throw new Error('User with this email already exists');\r\n  }\r\n  \r\n  const newUser = {\r\n    id: Date.now().toString(),\r\n    name,\r\n    email,\r\n    password, // Note: In real app, hash the password!\r\n    createdAt: new Date().toISOString()\r\n  };\r\n  \r\n  users.push(newUser);\r\n  localStorage.setItem('users', JSON.stringify(users));\r\n  localStorage.setItem('currentUser', JSON.stringify(newUser));\r\n  \r\n  return newUser;\r\n};\r\n\r\nexport const loginUser = (email, password) => {\r\n  const users = JSON.parse(localStorage.getItem('users')) || [];\r\n  const user = users.find(u => u.email === email && u.password === password);\r\n  \r\n  if (!user) {\r\n    throw new Error('Invalid email or password');\r\n  }\r\n  \r\n  localStorage.setItem('currentUser', JSON.stringify(user));\r\n  return user;\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  localStorage.removeItem('currentUser');\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  const user = localStorage.getItem('currentUser');\r\n  return user ? JSON.parse(user) : null;\r\n};\r\n\r\n// Task management\r\nexport const getTasks = (userId) => {\r\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n  return tasks.filter(task => task.userId === userId);\r\n};\r\n\r\nexport const createTask = (taskData, userId) => {\r\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n  const newTask = {\r\n    id: Date.now().toString(),\r\n    userId,\r\n    ...taskData,\r\n    completed: false,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString()\r\n  };\r\n  \r\n  tasks.push(newTask);\r\n  localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  return newTask;\r\n};\r\n\r\nexport const updateTask = (taskId, updates) => {\r\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n  const taskIndex = tasks.findIndex(task => task.id === taskId);\r\n  \r\n  if (taskIndex === -1) {\r\n    throw new Error('Task not found');\r\n  }\r\n  \r\n  tasks[taskIndex] = {\r\n    ...tasks[taskIndex],\r\n    ...updates,\r\n    updatedAt: new Date().toISOString()\r\n  };\r\n  \r\n  localStorage.setItem('tasks', JSON.stringify(tasks));\r\n  return tasks[taskIndex];\r\n};\r\n\r\nexport const deleteTask = (taskId) => {\r\n  const tasks = JSON.parse(localStorage.getItem('tasks')) || [];\r\n  const filteredTasks = tasks.filter(task => task.id !== taskId);\r\n  localStorage.setItem('tasks', JSON.stringify(filteredTasks));\r\n};\r\n\r\nexport const toggleTaskCompletion = (taskId, currentStatus) => {\r\n  return updateTask(taskId, { completed: !currentStatus });\r\n};\r\n\r\n// Statistics\r\nexport const getTaskStatistics = (userId) => {\r\n  const tasks = getTasks(userId);\r\n  const total = tasks.length;\r\n  const completed = tasks.filter(task => task.completed).length;\r\n  const pending = total - completed;\r\n  \r\n  const today = new Date();\r\n  today.setHours(0, 0, 0, 0);\r\n  \r\n  const dueToday = tasks.filter(task => {\r\n    if (!task.dueDate || task.completed) return false;\r\n    const dueDate = new Date(task.dueDate);\r\n    dueDate.setHours(0, 0, 0, 0);\r\n    return dueDate.getTime() === today.getTime();\r\n  }).length;\r\n  \r\n  const overdue = tasks.filter(task => {\r\n    if (!task.dueDate || task.completed) return false;\r\n    const dueDate = new Date(task.dueDate);\r\n    return dueDate < today;\r\n  }).length;\r\n  \r\n  return { total, completed, pending, dueToday, overdue };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}