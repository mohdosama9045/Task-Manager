{"ast":null,"code":"var _jsxFileName = \"C:\\\\Person S\\\\web\\\\Task\\\\FrontEnd\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dashboard from './pages/Dashboard';\nimport AuthForm from './components/AuthForm';\nimport { getCurrentUser, loginUser, registerUser, logoutUser } from './services/localStorage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [authType, setAuthType] = useState('login');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const user = getCurrentUser();\n    if (user) {\n      setCurrentUser(user);\n    }\n  }, []);\n  const handleAuth = async (email, password, name = null) => {\n    setLoading(true);\n    setError('');\n    try {\n      let user;\n      if (authType === 'login') {\n        user = await loginUser(email, password);\n      } else {\n        user = await registerUser(name, email, password);\n      }\n      setCurrentUser(user);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLogout = () => {\n    logoutUser();\n    setCurrentUser(null);\n    setAuthType('login');\n  };\n  const switchAuthType = type => {\n    setAuthType(type);\n    setError('');\n  };\n  if (currentUser) {\n    return /*#__PURE__*/_jsxDEV(Dashboard, {\n      user: currentUser,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: authType,\n    onSubmit: handleAuth,\n    loading: loading,\n    error: error,\n    onSwitchType: switchAuthType\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8onC8OZDL4LRR/Q5wufDduhaVVU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","AuthForm","getCurrentUser","loginUser","registerUser","logoutUser","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","authType","setAuthType","loading","setLoading","error","setError","user","handleAuth","email","password","name","err","message","handleLogout","switchAuthType","type","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onSwitchType","_c","$RefreshReg$"],"sources":["C:/Person S/web/Task/FrontEnd/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dashboard from './pages/Dashboard';\r\nimport AuthForm from './components/AuthForm';\r\nimport { getCurrentUser, loginUser, registerUser, logoutUser } from './services/localStorage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [authType, setAuthType] = useState('login');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const user = getCurrentUser();\r\n    if (user) {\r\n      setCurrentUser(user);\r\n    }\r\n  }, []);\r\n\r\n  const handleAuth = async (email, password, name = null) => {\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      let user;\r\n      if (authType === 'login') {\r\n        user = await loginUser(email, password);\r\n      } else {\r\n        user = await registerUser(name, email, password);\r\n      }\r\n      setCurrentUser(user);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logoutUser();\r\n    setCurrentUser(null);\r\n    setAuthType('login');\r\n  };\r\n\r\n  const switchAuthType = (type) => {\r\n    setAuthType(type);\r\n    setError('');\r\n  };\r\n\r\n  if (currentUser) {\r\n    return <Dashboard user={currentUser} onLogout={handleLogout} />;\r\n  }\r\n\r\n  return (\r\n    <AuthForm\r\n      type={authType}\r\n      onSubmit={handleAuth}\r\n      loading={loading}\r\n      error={error}\r\n      onSwitchType={switchAuthType}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,SAASC,cAAc,EAAEC,SAAS,EAAEC,YAAY,EAAEC,UAAU,QAAQ,yBAAyB;AAC7F,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,OAAO,CAAC;EACjD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMmB,IAAI,GAAGhB,cAAc,CAAC,CAAC;IAC7B,IAAIgB,IAAI,EAAE;MACRP,cAAc,CAACO,IAAI,CAAC;IACtB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,GAAG,IAAI,KAAK;IACzDP,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,IAAIC,IAAI;MACR,IAAIN,QAAQ,KAAK,OAAO,EAAE;QACxBM,IAAI,GAAG,MAAMf,SAAS,CAACiB,KAAK,EAAEC,QAAQ,CAAC;MACzC,CAAC,MAAM;QACLH,IAAI,GAAG,MAAMd,YAAY,CAACkB,IAAI,EAAEF,KAAK,EAAEC,QAAQ,CAAC;MAClD;MACAV,cAAc,CAACO,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZN,QAAQ,CAACM,GAAG,CAACC,OAAO,CAAC;IACvB,CAAC,SAAS;MACRT,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzBpB,UAAU,CAAC,CAAC;IACZM,cAAc,CAAC,IAAI,CAAC;IACpBE,WAAW,CAAC,OAAO,CAAC;EACtB,CAAC;EAED,MAAMa,cAAc,GAAIC,IAAI,IAAK;IAC/Bd,WAAW,CAACc,IAAI,CAAC;IACjBV,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,IAAIP,WAAW,EAAE;IACf,oBAAOH,OAAA,CAACP,SAAS;MAACkB,IAAI,EAAER,WAAY;MAACkB,QAAQ,EAAEH;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjE;EAEA,oBACEzB,OAAA,CAACN,QAAQ;IACP0B,IAAI,EAAEf,QAAS;IACfqB,QAAQ,EAAEd,UAAW;IACrBL,OAAO,EAAEA,OAAQ;IACjBE,KAAK,EAAEA,KAAM;IACbkB,YAAY,EAAER;EAAe;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEN;AAACvB,EAAA,CAxDQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}