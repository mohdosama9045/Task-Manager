{"ast":null,"code":"/*\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Generic API request function\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers\r\n    },\r\n    ...options\r\n  };\r\n\r\n  // Add authorization header if token exists\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  if (config.body && typeof config.body === 'object') {\r\n    config.body = JSON.stringify(config.body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw new Error(error.message || 'Network error. Please check your connection.');\r\n  }\r\n};\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => apiRequest('/auth/register', {\r\n    method: 'POST',\r\n    body: userData\r\n  }),\r\n  login: (credentials) => apiRequest('/auth/login', {\r\n    method: 'POST',\r\n    body: credentials\r\n  }),\r\n  getMe: () => apiRequest('/auth/me'),\r\n  logout: () => apiRequest('/auth/logout', {\r\n    method: 'POST'\r\n  })\r\n};\r\n\r\n// Tasks API\r\nexport const tasksAPI = {\r\n  getAll: () => apiRequest('/tasks'),\r\n  getById: (id) => apiRequest(`/tasks/${id}`),\r\n  create: (taskData) => apiRequest('/tasks', {\r\n    method: 'POST',\r\n    body: taskData\r\n  }),\r\n  update: (id, updates) => apiRequest(`/tasks/${id}`, {\r\n    method: 'PUT',\r\n    body: updates\r\n  }),\r\n  delete: (id) => apiRequest(`/tasks/${id}`, {\r\n    method: 'DELETE'\r\n  }),\r\n  toggle: (id) => apiRequest(`/tasks/${id}/toggle`, {\r\n    method: 'PATCH'\r\n  }),\r\n  getStatistics: () => apiRequest('/tasks/stats')\r\n};\r\n\r\nexport default apiRequest;\r\n*/","map":{"version":3,"names":[],"sources":["C:/Person S/web/Task/FrontEnd/src/services/localStorage.js"],"sourcesContent":["/*\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Generic API request function\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...options.headers\r\n    },\r\n    ...options\r\n  };\r\n\r\n  // Add authorization header if token exists\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n\r\n  if (config.body && typeof config.body === 'object') {\r\n    config.body = JSON.stringify(config.body);\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw new Error(error.message || 'Network error. Please check your connection.');\r\n  }\r\n};\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => apiRequest('/auth/register', {\r\n    method: 'POST',\r\n    body: userData\r\n  }),\r\n  login: (credentials) => apiRequest('/auth/login', {\r\n    method: 'POST',\r\n    body: credentials\r\n  }),\r\n  getMe: () => apiRequest('/auth/me'),\r\n  logout: () => apiRequest('/auth/logout', {\r\n    method: 'POST'\r\n  })\r\n};\r\n\r\n// Tasks API\r\nexport const tasksAPI = {\r\n  getAll: () => apiRequest('/tasks'),\r\n  getById: (id) => apiRequest(`/tasks/${id}`),\r\n  create: (taskData) => apiRequest('/tasks', {\r\n    method: 'POST',\r\n    body: taskData\r\n  }),\r\n  update: (id, updates) => apiRequest(`/tasks/${id}`, {\r\n    method: 'PUT',\r\n    body: updates\r\n  }),\r\n  delete: (id) => apiRequest(`/tasks/${id}`, {\r\n    method: 'DELETE'\r\n  }),\r\n  toggle: (id) => apiRequest(`/tasks/${id}/toggle`, {\r\n    method: 'PATCH'\r\n  }),\r\n  getStatistics: () => apiRequest('/tasks/stats')\r\n};\r\n\r\nexport default apiRequest;\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}